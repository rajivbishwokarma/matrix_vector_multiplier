# -*- coding: utf-8 -*-
"""matrixvector_ieee754.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sL2eMIHBD3Js6ucPiaWuCxSRi8ZNmTxl
"""

!pip install numpy
!pip install ieee754

import random
random.seed(0)

rows = 10
columns = 10

# Define the desired range for the random floating-point numbers
min_value = 0.0
max_value = 10.0

# Generate a 10x10 floating-point matrix with random values within the specified range
matrix = [[random.uniform(min_value, max_value) for _ in range(columns)] for _ in range(rows)]

# Generate a 10x1 floating-point vector with random values within the specified range
vector = [random.uniform(min_value, max_value) for _ in range(rows)]


# # Print the matrix
for row in matrix:
    print(row)
print("")
for row in vector:
    print(row, end=' ')

from ieee754 import IEEE754
float32_list = []
#float32 # = [[] for _ in range(len(matrix))]
for row in range(len(matrix)):
  for column in range(len(matrix)):
    float32 = IEEE754(matrix[row][column], 1)
    print(f"{float32} -> {matrix[row][column]}")
    float32_list.append(float32)
    

with open('matrix_bin.txt', "w") as mf:
  for m in float32_list: 
    mf.write(f"{str(m)}\n")
# for row in range(len(float32_list)):
#   print(f"{float32_list[row]}")

# Create the vector binary 
from ieee754 import IEEE754
float32_vector = []
for row in range(len(vector)):
    float32v = IEEE754(vector[row], 1)
    print(f"{float32v} -> {vector[row]}")
    float32_vector.append(float32v)


with open('vector_bin.txt', "w") as vf:
  for v in float32_vector: 
    vf.write(f"{str(v)}\n")


  # for row in range(len(float32_vector)):
  #   print(f"{float32_vector[row]}")

# Read binary numbers from the file and store them in a list
matrix_list = []
with open("matrix_bin.txt", "r") as f:
    for line in f:
        matrix_list.append(line.strip())

# Replace 'X' with binary numbers in the matrix
matrix10x10_bin = '''{{32'bX},{32'bX},{32'bX},{32'bX},{32'bX},{32'bX},{32'bX},{32'bX},{32'bX},{32'bX},
          {32'bX},{32'bX},{32'bX},{32'bX},{32'bX},{32'bX},{32'bX},{32'bX},{32'bX},{32'bX},
          {32'bX},{32'bX},{32'bX},{32'bX},{32'bX},{32'bX},{32'bX},{32'bX},{32'bX},{32'bX},
          {32'bX},{32'bX},{32'bX},{32'bX},{32'bX},{32'bX},{32'bX},{32'bX},{32'bX},{32'bX},
          {32'bX},{32'bX},{32'bX},{32'bX},{32'bX},{32'bX},{32'bX},{32'bX},{32'bX},{32'bX},
          {32'bX},{32'bX},{32'bX},{32'bX},{32'bX},{32'bX},{32'bX},{32'bX},{32'bX},{32'bX},
          {32'bX},{32'bX},{32'bX},{32'bX},{32'bX},{32'bX},{32'bX},{32'bX},{32'bX},{32'bX},
          {32'bX},{32'bX},{32'bX},{32'bX},{32'bX},{32'bX},{32'bX},{32'bX},{32'bX},{32'bX},
          {32'bX},{32'bX},{32'bX},{32'bX},{32'bX},{32'bX},{32'bX},{32'bX},{32'bX},{32'bX},
          {32'bX},{32'bX},{32'bX},{32'bX},{32'bX},{32'bX},{32'bX},{32'bX},{32'bX},{32'bX}};'''

matrix4x4_bin = '''{{32'bX},{32'bX},{32'bX},{32'bX},
                    {32'bX},{32'bX},{32'bX},{32'bX},
                    {32'bX},{32'bX},{32'bX},{32'bX},
                    {32'bX},{32'bX},{32'bX},{32'bX}};'''


for number in matrix_list:
    matrix4x4_bin = matrix4x4_bin.replace('X', number, 1)

print("Matrix with binary numbers:")
print(matrix4x4_bin)


vector_list = []
with open("vector_bin.txt", "r") as f:
    for line in f:
        vector_list.append(line.strip())


# Replace 'X' with binary numbers in the vector
vector_bin10x1 = "{{32'bX},{32'bX},{32'bX},{32'bX},{32'bX},{32'bX},{32'bX},{32'bX},{32'bX},{32'bX}}"
vector_bin4x1  = "{{32'bX},{32'bX},{32'bX},{32'bX}};"

for number in vector_list:
    vector_bin4x1 = vector_bin4x1.replace('X', number, 1)

print("Vector with binary numbers:")
print(vector_bin4x1)

matrix_rev = matrix
# Interchange elements in the matrix
for i in range(len(matrix_rev) // 2):
    for j in range(len(matrix_rev[i])):
        temp = matrix_rev[i][j]
        matrix_rev[i][j] = matrix_rev[len(matrix) - 1 - i][len(matrix_rev[i]) - 1 - j]
        matrix_rev[len(matrix_rev) - 1 - i][len(matrix_rev[i]) - 1 - j] = temp

print("Interchanged matrix:")
for row in matrix_rev:
    print(row)



print(vector)
vector_rev = vector[::-1]

print("Reversed vector:")
print(vector_rev)

import struct

def binary_to_float(binary_str: str) -> float:
    if len(binary_str) != 32:
        raise ValueError("Binary string must be 32 bits long.")

    int_val = int(binary_str, 2)
    float_val = struct.unpack('!f', struct.pack('!I', int_val))[0]
    return float_val

# Example usage:
binary_str = '01000001000001110001101110000100'
float_val = binary_to_float(binary_str)
print(f"Binary: {binary_str}\nFloating-point value: {float_val}")



binary_str = '01000000111010100001001110011000'
float_val = binary_to_float(binary_str)

# MATRIX_4X4 = { {32'b01000000100110111010100110000010},{32'b01000000110001000001011100110001},{32'b00111111111010010110111111111011},{32'b01000000111111011101110100110000},
#                         {32'b01000001000100101011010111101001},{32'b01000001000111110110011010111000},{32'b01000000110100110100011101001101},{32'b01000000100100000010111000100001},
#                         {32'b01000000101110011000000010011101},{32'b01000001000101111111011001011110},{32'b01000000101111001011110010000011},{32'b01000001000011110011010011001011},
#                         {32'b01000001000001111110101011110001},{32'b01000001000000011101110001001111},{32'b01000000001100000110011111100100},{32'b01000000111000011011000011010000}};

MATRIX_4X4 = [ ['01000000100110111010100110000010','01000000110001000001011100110001','00111111111010010110111111111011','01000000111111011101110100110000'],
                ['01000001000100101011010111101001','01000001000111110110011010111000','01000000110100110100011101001101','01000000100100000010111000100001'],
                ['01000000101110011000000010011101','01000001000101111111011001011110','01000000101111001011110010000011','01000001000011110011010011001011'],
                ['01000001000001111110101011110001','01000001000000011101110001001111','01000000001100000110011111100100','01000000111000011011000011010000']]
MBIN_4X4 = [[IEEE754(0, 1) for i in range(4)] for j in range(4)]

for i in range(3, -1, -1):
  for j in range(3, -1, -1):
    MBIN_4X4[i][j] = binary_to_float(MATRIX_4X4[i][j])
    print(f"{MBIN_4X4[i][j]}\t")
  print("\n")

VECTOR_4X1 = ['01000000110010011010010110101011','01000001000001110011011001100000','01000000000110111000101011110100','01000000111010100001001110011000'];

VBIN = [IEEE754(0, 1) for i in range(4)]

for i in range(3, -1, -1):
  VBIN[i] = binary_to_float(VECTOR_4X1[i])
  print(VBIN[i])

